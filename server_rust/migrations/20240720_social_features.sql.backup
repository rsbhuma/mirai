-- Migration for social media features
-- Add social features to support discussions, chats, challenges, rewards, etc.

-- Create custom types
CREATE TYPE content_type AS ENUM ('text', 'image', 'video', 'link');
CREATE TYPE message_type AS ENUM ('text', 'image', 'file', 'system');
CREATE TYPE challenge_status AS ENUM ('proposal', 'active', 'completed', 'cancelled');
CREATE TYPE reward_type AS ENUM ('challenge', 'trading', 'staking', 'referral', 'achievement');
CREATE TYPE comment_parent_type AS ENUM ('discussion', 'feeditem');
CREATE TYPE like_target_type AS ENUM ('feeditem', 'discussion', 'comment', 'chatmessage');

-- Feed Items (Posts)
CREATE TABLE feed_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    creator_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content_type content_type NOT NULL DEFAULT 'text',
    title VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    media_url TEXT,
    external_url TEXT,
    vision TEXT NOT NULL,
    twitter_url TEXT,
    discord_url TEXT,
    github_url TEXT,
    likes_count INTEGER NOT NULL DEFAULT 0,
    comments_count INTEGER NOT NULL DEFAULT 0,
    token_id UUID REFERENCES tokens(id) ON DELETE SET NULL,
    is_published BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Discussions (Token-specific)
CREATE TABLE discussions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token_id UUID NOT NULL REFERENCES tokens(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    media_url TEXT,
    likes_count INTEGER NOT NULL DEFAULT 0,
    replies_count INTEGER NOT NULL DEFAULT 0,
    is_pinned BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Chat Messages (Token-specific)
CREATE TABLE chat_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token_id UUID NOT NULL REFERENCES tokens(id) ON DELETE CASCADE,
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    message_type message_type NOT NULL DEFAULT 'text',
    reply_to_id UUID REFERENCES chat_messages(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Challenges (Token-specific)
CREATE TABLE challenges (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    token_id UUID NOT NULL REFERENCES tokens(id) ON DELETE CASCADE,
    creator_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    target_prize BIGINT NOT NULL,
    current_prize BIGINT NOT NULL DEFAULT 0,
    participants_count INTEGER NOT NULL DEFAULT 0,
    submissions_count INTEGER NOT NULL DEFAULT 0,
    deadline TIMESTAMP WITH TIME ZONE NOT NULL,
    status challenge_status NOT NULL DEFAULT 'proposal',
    winner_id UUID REFERENCES users(id) ON DELETE SET NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Challenge Submissions
CREATE TABLE challenge_submissions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    challenge_id UUID NOT NULL REFERENCES challenges(id) ON DELETE CASCADE,
    participant_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    submission_url TEXT,
    votes_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE(challenge_id, participant_id)
);

-- Rewards
CREATE TABLE rewards (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token_id UUID NOT NULL REFERENCES tokens(id) ON DELETE CASCADE,
    reward_type reward_type NOT NULL,
    amount BIGINT NOT NULL,
    description TEXT NOT NULL,
    source_id UUID, -- Challenge ID, etc.
    claimed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Comments (for discussions and feed items)
CREATE TABLE comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    parent_type comment_parent_type NOT NULL,
    parent_id UUID NOT NULL, -- Discussion ID or Feed Item ID
    author_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    reply_to_id UUID REFERENCES comments(id) ON DELETE SET NULL,
    likes_count INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Likes (for various content types)
CREATE TABLE likes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    target_type like_target_type NOT NULL,
    target_id UUID NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    UNIQUE(user_id, target_type, target_id)
);

-- Token Stakers (for tracking who can access certain features)
CREATE TABLE token_stakers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token_id UUID NOT NULL REFERENCES tokens(id) ON DELETE CASCADE,
    staked_amount BIGINT NOT NULL,
    staking_duration INTEGER NOT NULL, -- days
    rewards_earned BIGINT NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT true,
    staked_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    unstaked_at TIMESTAMP WITH TIME ZONE,
    UNIQUE(user_id, token_id, is_active) -- One active stake per user per token
);

-- Create indexes for better performance
CREATE INDEX idx_feed_items_creator_id ON feed_items(creator_id);
CREATE INDEX idx_feed_items_token_id ON feed_items(token_id);
CREATE INDEX idx_feed_items_created_at ON feed_items(created_at DESC);
CREATE INDEX idx_feed_items_is_published ON feed_items(is_published);

CREATE INDEX idx_discussions_token_id ON discussions(token_id);
CREATE INDEX idx_discussions_author_id ON discussions(author_id);
CREATE INDEX idx_discussions_created_at ON discussions(created_at DESC);
CREATE INDEX idx_discussions_is_pinned ON discussions(is_pinned);

CREATE INDEX idx_chat_messages_token_id ON chat_messages(token_id);
CREATE INDEX idx_chat_messages_author_id ON chat_messages(author_id);
CREATE INDEX idx_chat_messages_created_at ON chat_messages(created_at DESC);
CREATE INDEX idx_chat_messages_reply_to_id ON chat_messages(reply_to_id);

CREATE INDEX idx_challenges_token_id ON challenges(token_id);
CREATE INDEX idx_challenges_creator_id ON challenges(creator_id);
CREATE INDEX idx_challenges_status ON challenges(status);
CREATE INDEX idx_challenges_deadline ON challenges(deadline);

CREATE INDEX idx_challenge_submissions_challenge_id ON challenge_submissions(challenge_id);
CREATE INDEX idx_challenge_submissions_participant_id ON challenge_submissions(participant_id);

CREATE INDEX idx_rewards_user_id ON rewards(user_id);
CREATE INDEX idx_rewards_token_id ON rewards(token_id);
CREATE INDEX idx_rewards_reward_type ON rewards(reward_type);
CREATE INDEX idx_rewards_claimed_at ON rewards(claimed_at);

CREATE INDEX idx_comments_parent_type_parent_id ON comments(parent_type, parent_id);
CREATE INDEX idx_comments_author_id ON comments(author_id);
CREATE INDEX idx_comments_reply_to_id ON comments(reply_to_id);
CREATE INDEX idx_comments_created_at ON comments(created_at DESC);

CREATE INDEX idx_likes_user_id ON likes(user_id);
CREATE INDEX idx_likes_target_type_target_id ON likes(target_type, target_id);

CREATE INDEX idx_token_stakers_user_id ON token_stakers(user_id);
CREATE INDEX idx_token_stakers_token_id ON token_stakers(token_id);
CREATE INDEX idx_token_stakers_is_active ON token_stakers(is_active);

-- Create triggers for updating counts
CREATE OR REPLACE FUNCTION update_feed_item_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'comments' AND NEW.parent_type = 'feeditem' THEN
        UPDATE feed_items 
        SET comments_count = comments_count + 1,
            updated_at = NOW()
        WHERE id = NEW.parent_id;
    ELSIF TG_TABLE_NAME = 'likes' AND NEW.target_type = 'feeditem' THEN
        UPDATE feed_items 
        SET likes_count = likes_count + 1,
            updated_at = NOW()
        WHERE id = NEW.target_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_discussion_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'comments' AND NEW.parent_type = 'discussion' THEN
        UPDATE discussions 
        SET replies_count = replies_count + 1,
            updated_at = NOW()
        WHERE id = NEW.parent_id;
    ELSIF TG_TABLE_NAME = 'likes' AND NEW.target_type = 'discussion' THEN
        UPDATE discussions 
        SET likes_count = likes_count + 1,
            updated_at = NOW()
        WHERE id = NEW.target_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_comment_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'likes' AND NEW.target_type = 'comment' THEN
        UPDATE comments 
        SET likes_count = likes_count + 1,
            updated_at = NOW()
        WHERE id = NEW.target_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers
CREATE TRIGGER trigger_update_feed_item_comments
    AFTER INSERT ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_feed_item_stats();

CREATE TRIGGER trigger_update_feed_item_likes
    AFTER INSERT ON likes
    FOR EACH ROW
    EXECUTE FUNCTION update_feed_item_stats();

CREATE TRIGGER trigger_update_discussion_comments
    AFTER INSERT ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_discussion_stats();

CREATE TRIGGER trigger_update_discussion_likes
    AFTER INSERT ON likes
    FOR EACH ROW
    EXECUTE FUNCTION update_discussion_stats();

CREATE TRIGGER trigger_update_comment_likes
    AFTER INSERT ON likes
    FOR EACH ROW
    EXECUTE FUNCTION update_comment_stats();

-- Add updated_at trigger for tables that need it
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_feed_items_updated_at
    BEFORE UPDATE ON feed_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER trigger_discussions_updated_at
    BEFORE UPDATE ON discussions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER trigger_challenges_updated_at
    BEFORE UPDATE ON challenges
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER trigger_comments_updated_at
    BEFORE UPDATE ON comments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 