# Terraform Variables for Community Coin Server AWS Deployment
# Copy this file to terraform.tfvars and customize the values

# Basic Configuration
project_name = "community-coin"
environment  = "production"
aws_region   = "us-west-2"  # Choose your preferred region

# Domain Configuration
domain_name = "api.communitycoin.com"  # Replace with your domain

# Auto-scaling Configuration (Cost Optimized)
min_capacity = 1    # Start with 1 container (minimum cost)
max_capacity = 50   # Scale up to 50 containers (adjust based on needs)

# CPU utilization target for auto-scaling
target_cpu_utilization = 70

# Database Configuration (Cost Optimized)
# Aurora Serverless v2 will auto-scale from 0.5 to 16 ACUs
# For traditional RDS (if Aurora not available):
db_instance_class = "db.t4g.micro"  # Smallest instance for testing

# Example Cost Projections (Monthly USD):
# 
# MINIMAL USAGE (0-100 users):
# - ECS Fargate: $15-30 (1 task, mostly Spot)
# - Aurora Serverless: $7-15 (0.5-1 ACU)
# - ElastiCache: $10-15 (t4g.micro)
# - ALB: $20
# - NAT Gateway: $45
# - Total: ~$100-125/month
#
# MODERATE USAGE (1,000-10,000 users):
# - ECS Fargate: $100-300 (3-10 tasks)
# - Aurora Serverless: $50-200 (2-8 ACUs)
# - ElastiCache: $30-100 (scale up nodes)
# - ALB: $25
# - NAT Gateway: $45
# - Total: ~$250-670/month
#
# HIGH USAGE (50,000+ users):
# - ECS Fargate: $500-2000 (20-50 tasks)
# - Aurora Serverless: $200-800 (8-16 ACUs)
# - ElastiCache: $200-500 (multiple nodes)
# - ALB: $50
# - NAT Gateway: $45
# - Total: ~$1000-3400/month

# Cost Optimization Tips:
# 1. Use Fargate Spot (80% cost savings)
# 2. Aurora Serverless scales to 0.5 ACU when idle
# 3. ElastiCache scheduled scaling for off-peak hours
# 4. Single NAT Gateway (vs per-AZ) saves ~$45/month per extra AZ
# 5. Short log retention periods (7 days vs 30 days)
# 6. Lifecycle policies for S3 artifacts cleanup 